(defstruct vertex-data vao vbo)
(defmacro make-vertex-data* (vertices &rest attrib-values)
  (let ((size-table (make-hash-table))
        (stride 0)
        (curr-stride 0)
        (i 0)
        (instructions (list)))
    (setf (gethash :float size-table) 4)
    (dolist (attrib attrib-values)
      (incf stride (* (gethash (car attrib) size-table) (cdr attrib))))

    (push 'let instructions)
    (push '((out (make-vertex-data :vao (gl:gen-vertex-array) :vbo (gl:gen-buffer)))) instructions)
    (push '(gl:bind-vertex-array (vertex-data-vao out)) instructions)
    (push '(gl:bind-buffer :array-buffer (vertex-data-vbo out)) instructions)
    (push `(gl:buffer-data :array-buffer :static-draw ,vertices) instructions)

    (dolist (attrib attrib-values)
      (push `(gl:vertex-attrib-pointer ,i ,(cdr attrib) ,(car attrib) :false ,stride ,curr-stride) instructions)
      (push `(gl:enable-vertex-attrib-array ,i) instructions)
      (incf i)
      (incf curr-stride (* (gethash (car attrib) size-table) (cdr attrib))))
    (push 'out instructions)
    (reverse instructions)))

#|
RESULT:
(let ((out (make-vertex-data :vao (gl:gen-vertex-array) :vbo (gl:gen-buffer))))
    (gl:bind-vertex-array (vertex-data-vao out))
    (gl:bind-buffer :array-buffer (vertex-data-vbo out))
    (gl:buffer-data :array-buffer :static-draw *vertices*)
    (gl:vertex-attrib-pointer 0 3 :float :false 32 0)
    (gl:enable-vertex-attrib-array 0)
    (gl:vertex-attrib-pointer 1 3 :float :false 32 12)
    (gl:enable-vertex-attrib-array 1)
    (gl:vertex-attrib-pointer 2 2 :float :false 32 24)
    (gl:enable-vertex-attrib-array 2)
    out)
|#
